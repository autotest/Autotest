BEGIN TRANSACTION;

-- kernel versions
CREATE TABLE kernels (
kernel_idx INTEGER PRIMARY KEY,
kernel_hash VARCHAR(35),		-- Hash of base + all patches
base VARCHAR(30),			-- Base version without patches
printable VARCHAR(100)			-- Full version with patches
);

-- main jobs table
CREATE TABLE jobs (
job_idx INTEGER PRIMARY KEY,		-- index number
tag VARCHAR(30),			-- job key
machine VARCHAR(80)			-- machine name
);

-- One entry per patch used, anywhere
CREATE TABLE patches (
kernel_idx INTEGER,			-- index number
name VARCHAR(80),			-- short name
url VARCHAR(300),			-- full URL
hash VARCHAR(35)
);

-- test functional results
CREATE TABLE tests (
test_idx INTEGER PRIMARY KEY,		-- index number
job_idx INTEGER,			-- ref to job table
test VARCHAR(30),			-- name of test
subdir VARCHAR(60),			-- subdirectory name
kernel_idx INTEGER,			-- kernel test was AGAINST
status INTEGER,				-- test status
reason VARCHAR(100),			-- reason for test status
machine VARCHAR(80)			-- machine name
);

-- test functional results
CREATE TABLE test_attributes (
test_idx INTEGER,			-- ref to test table
attribute VARCHAR(30),			-- attribute name (e.g. 'throughput')
value VARCHAR(100)			-- attribute value
);

-- test functional results
CREATE TABLE iteration_result(
test_idx INTEGER,			-- ref to test table
iteration INTEGER,			-- integer
attribute VARCHAR(30),			-- attribute name (e.g. 'throughput')
value FLOAT				-- attribute value (eg 700.1)
);

-- status key
CREATE TABLE status (
status_idx INTEGER PRIMARY KEY,		-- numerical status
word VARCHAR(10)			-- status word
);

COMMIT;
