AUTHOR = "Bryce Boe <bboe@google.com>"
TIME = "SHORT"
NAME = "Iperf Multi-machine"
TEST_CATEGORY = "Stress"
TEST_TYPE = "Server"
SYNC_COUNT = 2
DOC = """
Iperf is a 2 machine test (server/client) that measures maximum TCP and UDP
bandwidth performace.

Arguments to run_test:

server_ip     - the ip of the server (automatically filled in)
client_ip     - the ip of the client (automatically filled in)
role          - specifies either client or server (automatically filled in)
udp           - [False/True] specifies if a UDP test should be run. Defaults to
                TCP if unspecified.
bidirectional - [False/True] specifies if a bidirectional test should be run.
                Defaults to False
"""

from autotest_lib.server import utils


def run(pair):
    print "running on %s and %s\n" % (pair[0], pair[1])
    tagname = "%s_%s" % (pair[0], pair[1])
    server = hosts.SSHHost(pair[0])
    client = hosts.SSHHost(pair[1])

    server_at = autotest.Autotest(server)
    client_at = autotest.Autotest(client)

    template = ''.join(["job.run_test('iperf', server_ip='%s', client_ip=",
                        "'%s', role='%s', udp=False, bidirectional=False)"])

    server_control_file = template % (server.ip, client.ip, 'server')
    client_control_file = template % (server.ip, client.ip, 'client')

    server_command = subcommand(server_at.run,
                               [server_control_file, server.hostname])
    client_command = subcommand(client_at.run,
                               [client_control_file, client.hostname])

    parallel([server_command, client_command])


# grab the pairs (and failures)
(pairs, failures) = utils.form_ntuples_from_machines(machines, 2)

# log the failures
for failure in failures:
    job.record("FAIL", failure[0], "iperf", failure[1])

# now run through each pair and run
parallel_simple(run, pairs)
