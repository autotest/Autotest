AUTHOR = "gps@google.com (Gregory P. Smith)"
TIME = "SHORT"
NAME = "barrier_2client"
TEST_CATEGORY = "Functional"
TEST_CLASS = 'Network'
TEST_TYPE = "Server"
EXPERIMENTAL = True  # This is functional a test of autotest itself.
SYNC_COUNT = 2
DOC = """
A functional test of autotest's Barrier mechanisms for synchronizing
events between two clients without the help of the server.
"""

from autotest_lib.client.common_lib import barrier, error
from autotest_lib.server import autotest, hosts, subcommand

assert len(machines) > 1, "gimme at least two machines!"
if len(machines) > 2:
    machines = machines[:2]

host_objs = [hosts.create_host(machine) for machine in machines]
host_at_objs = [autotest.Autotest(host) for host in host_objs]

client_control_template = """
import logging, platform, traceback
try:
    client_hostnames = %r
    logging.info('creating barrier')
    barrier = job.barrier(platform.node(), 'barriertest_2client', 120)
    logging.info('rendezvous-ing')
    barrier.rendezvous(client_hostnames[0], *client_hostnames[1:])
    logging.info('done.')
except:
    traceback.print_exc()
    raise
"""
client_controls = [client_control_template % (machines,) for host in host_objs]

subcommand_list = []
for host, host_at, control in zip(host_objs, host_at_objs, client_controls):
    subcommand_list.append(subcommand.subcommand(
            host_at.run, (control, host.hostname)))

subcommand.parallel(subcommand_list)
