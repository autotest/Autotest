import logging, os, sys, fcntl
kvm_test_dir = "/usr/local/autotest/client/tests/kvm"
from autotest.client.shared import cartesian_config

def get_control(params, custom_cfg, kernel_install=True):
    control = '''
import sys, os, logging
os.environ['LANG'] = 'en_US.UTF-8'
kvm_test_dir = os.path.join(os.environ['AUTODIR'],'tests', 'kvm')
sys.path.append(kvm_test_dir)
from autotest.client.shared import cartesian_config
from autotest.client.virt import virt_utils

kernel_install_params = %s
custom_cfg = %s
kernel_install = %s

def step_init():
    job.next_step([step_test])
    if kernel_install:
        try:
            virt_utils.install_host_kernel(job, kernel_install_params)
        except Exception, details:
            job.record('FAIL', None, 'host kernel install (client)', str(details))

def step_test():
    parser = cartesian_config.Parser()
    parser.parse_file(os.path.join(kvm_test_dir, "redhat.cfg"))
    for line in custom_cfg:
        parser.parse_string(line)
    virt_utils.run_tests(parser, job)
''' % (params, custom_cfg, kernel_install)
    return control

def run(machine):
    parser = cartesian_config.Parser()
    parser.parse_file(os.path.join(kvm_test_dir, "redhat.cfg"))
    custom_cfg = $custom_job_cfg
    for line in custom_cfg:
        parser.parse_string(line)
    generator = parser.get_dicts()
    params = generator.next()
    host = hosts.create_host(machine)
    profile = params.get('host_install_profile')
    timeout = int(params.get('host_install_timeout', 3600))
    if profile:
        host.machine_install(profile=profile, timeout=timeout)
    at = autotest_remote.Autotest(host)
    control = get_control(params, custom_cfg)
    try:
        at.run(control)
    except Exception, details:
        job.record('FAIL', None, 'host kernel install (server)', str(details))
        control = get_control(params, custom_cfg, kernel_install=False)
        at.run(control)

job.parallel_simple(run, machines)
