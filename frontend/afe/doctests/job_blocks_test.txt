>>> from frontend.afe import rpc_interface, models

# clear the DB a bit
>>> models.Host.objects.all().delete()
>>> models.Job.objects.all().delete()

# utility to check blocks for a job
>>> def get_job_blocks(job):
...   blocks = models.IneligibleHostQueue.objects.filter(job=job)
...   hostnames = [block.host.hostname for block in blocks]
...   hostnames.sort()
...   return hostnames

# create test objects
>>> rpc_interface.add_host(hostname='blockhost1')
4L
>>> rpc_interface.add_host(hostname='blockhost2')
5L
>>> rpc_interface.add_host(hostname='blockhost3')
6L
>>> rpc_interface.add_acl_group(name='blockacl')
5L

>>> rpc_interface.acl_group_remove_users('Everyone', ['debug_user'])
>>> rpc_interface.acl_group_add_users('blockacl', ['debug_user'])
>>> rpc_interface.acl_group_add_hosts('blockacl', ['blockhost1', 'blockhost2',
...                                                'blockhost3'])

>>> rpc_interface.create_job(name='blockjob', priority='Medium', 
...     control_file='abc', control_type='Client', hosts=['blockhost1'])
4L

# all hosts are accessible, so only the used host is blocked
>>> get_job_blocks(4) # both hosts are accessible
['blockhost1']

# remove a host from the ACL and it gets blocked
>>> rpc_interface.acl_group_remove_hosts('blockacl', ['blockhost2'])
>>> get_job_blocks(4)
['blockhost1', 'blockhost2']

# add it back, the block is removed
>>> rpc_interface.acl_group_add_hosts('blockacl', ['blockhost2'])
>>> get_job_blocks(4)
['blockhost1']

# remove the user from the group, all the hosts get blocked
>>> rpc_interface.acl_group_remove_users('blockacl', ['debug_user'])
>>> get_job_blocks(4)
['blockhost1', 'blockhost2', 'blockhost3']

>>> rpc_interface.acl_group_add_users('blockacl', ['debug_user'])
>>> get_job_blocks(4)
['blockhost1']

# delete the group, all hosts get blocked
>>> rpc_interface.delete_acl_group('blockacl')
>>> get_job_blocks(4)
['blockhost1', 'blockhost2', 'blockhost3']
