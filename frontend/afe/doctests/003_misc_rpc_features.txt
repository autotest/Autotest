# this doctest contains tests for miscellaneous features of the RPC interface
# that would clutter the main rpc_test

# setup
>>> from autotest_lib.frontend.afe import rpc_interface

>>> rpc_interface.add_profiler(name='oprofile')
1
>>> rpc_interface.add_profiler(name='iostat')
2

# profiler support in control file generation
>>> cf_info = rpc_interface.generate_control_file(
...     tests=['sleeptest'],
...     profilers=['oprofile', 'iostat'])
>>> cf_info['control_file']
u"def step_init():\n    job.next_step('step0')\n    job.next_step('step1')\n    job.next_step('step2')\n    job.next_step('step3')\n    job.next_step('step4')\n\ndef step0():\n    job.profilers.add('oprofile')\n\ndef step1():\n    job.profilers.add('iostat')\n\ndef step2():\n    job.run_test('testname')\n\ndef step3():\n    job.profilers.delete('oprofile')\n\ndef step4():\n    job.profilers.delete('iostat')"

# server-side control file generation
>>> rpc_interface.modify_test('sleeptest', test_type='Server')
>>> cf_info = rpc_interface.generate_control_file(tests=['sleeptest'],
...                                               kernel='2.6.18, 2.6.22')
>>> print cf_info['control_file'] #doctest: +NORMALIZE_WHITESPACE
kernel_list = ['2.6.18', '2.6.22']
kernel_install_control = """
kernel_list = %(client_kernel_list)s
<BLANKLINE>
def step_init():
    for kernel_version in kernel_list:
        job.next_step(boot_kernel, kernel_version)
        job.next_step(step_test, kernel_version)
    if len(kernel_list) > 1:
        job.set_run_number(1)  # Include run numbers in output directory names.
        job.show_kernel_in_test_tag(True)  # Include kernel in output dir name.
<BLANKLINE>
def boot_kernel(kernel_version):
    testkernel = job.kernel(kernel_version)
<BLANKLINE>
    testkernel.install()
    testkernel.boot(args='')
<BLANKLINE>
def step_test(kernel_version):
    global kernel
    kernel = kernel_version  # Set the global in case anyone is using it.
    pass
"""
<BLANKLINE>
from autotest_lib.client.common_lib import error
<BLANKLINE>
at = autotest.Autotest()
def install_kernel(machine, kernel_version):
    host = hosts.create_host(machine)
    at.install(host=host)
    at.run(kernel_install_control %
           {'client_kernel_list': repr([kernel_version])}, host=host)
<BLANKLINE>
num_machines_required = len(machines)
if len(machines) > 4:
    # Allow a large multi-host tests to proceed despite a couple of hosts
    # failing to properly install the desired kernel (exclude those hosts).
    # TODO(gps): Figure out how to get and use SYNC_COUNT here.  It is defined
    # within some control files and will end up inside of stepN functions below.
    num_machines_required = len(machines) - 2
<BLANKLINE>
def step_init():
    # a host object we use solely for the purpose of finding out the booted
    # kernel version, we use machines[0] since we already check that the same
    # kernel has been booted on all machines
    if len(kernel_list) > 1:
        kernel_host = hosts.create_host(machines[0])
<BLANKLINE>
    for kernel_version in kernel_list:
        func = lambda machine: install_kernel(machine, kernel_version)
        good_machines = job.parallel_on_machines(func, machines)
        if len(good_machines) < num_machines_required:
            raise error.TestError(
                    "kernel installed on only %d of %d machines."
                    % (len(good_machines), num_machines_required))
<BLANKLINE>
        # Replace the machines list that step_test() will use with the
        # ones that successfully installed the kernel.
        machines[:] = good_machines
<BLANKLINE>
        # have server_job.run_test() automatically add the kernel version as
        # a suffix to the test name otherwise we cannot run the same test on
        # different kernel versions
        if len(kernel_list) > 1:
            job.set_test_tag_prefix(kernel_host.get_kernel_ver())
        step_test()
<BLANKLINE>
def step_test():
    step0()
<BLANKLINE>
def step0():
    job.run_test('testname')
<BLANKLINE>
step_init()
<BLANKLINE>
>>> cf_info['is_server']
True

# test that multiline quoted strings are not indented
>>> import common
>>> from autotest_lib.frontend.afe import test, control_file
>>> import os
>>> control_path = os.path.join(os.path.dirname(test.__file__),
...                             'doctests', 'test.control.3')
>>> control_path = os.path.abspath(control_path)
>>> class FakeTest(object):
...   path = control_path
...
>>> print control_file.generate_control([FakeTest()], is_server=True) #doctest: +NORMALIZE_WHITESPACE
def step_init():
    step0()
<BLANKLINE>
def step0():
    client_code = """
some content\"""quoted content\"""
'''other quoted content\"""'''
\\"""
<BLANKLINE>
    client_code2 = '''
some content\'''quoted content\'''
"""other quoted content\'''"""
\\'''
<BLANKLINE>
    job.run_test('testname')
<BLANKLINE>
step_init()
<BLANKLINE>
