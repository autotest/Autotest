# this doctest contains tests for miscellaneous features of the RPC interface
# that would clutter the main rpc_test

# setup
>>> from frontend.afe import rpc_interface

>>> rpc_interface.add_profiler(name='oprofile')
1
>>> rpc_interface.add_profiler(name='iostat')
2

# profiler support in control file generation
>>> cf_info = rpc_interface.generate_control_file(
...     tests=['sleeptest'],
...     profilers=['oprofile', 'iostat'])
>>> cf_info['control_file']
"def step_init():\n    job.next_step('step0')\n    job.next_step('step1')\n    job.next_step('step2')\n    job.next_step('step3')\n    job.next_step('step4')\n\ndef step0():\n    job.profilers.add('oprofile')\n\ndef step1():\n    job.profilers.add('iostat')\n\ndef step2():\n    job.run_test('testname')\n\ndef step3():\n    job.profilers.delete('oprofile')\n\ndef step4():\n    job.profilers.delete('iostat')"

# server-side control file generation
>>> rpc_interface.modify_test('sleeptest', test_type='Server')
>>> cf_info = rpc_interface.generate_control_file(tests=['sleeptest'],
...                                               kernel='2.6.18, 2.6.22')
>>> print cf_info['control_file'] #doctest: +NORMALIZE_WHITESPACE
kernel_list = ['2.6.18', '2.6.22']
kernel_install_control = """
kernel_list = ['2.6.18', '2.6.22']
<BLANKLINE>
def step_init():
    for kernel_version in kernel_list:
        job.next_step(boot_kernel, kernel_version)
        job.next_step(step_test, kernel_version)
<BLANKLINE>
def boot_kernel(kernel_version):
    testkernel = job.kernel(kernel_version)
<BLANKLINE>
    testkernel.install()
    testkernel.boot(args='')
<BLANKLINE>
def step_test(kernel_version):
    global kernel
    kernel = kernel_version  # Set the global in case anyone is using it.
    if len(kernel_list) > 1:
        job.set_test_tag_prefix(kernel_version)  # Separate output by kernel.
    pass
"""
<BLANKLINE>
at = autotest.Autotest()
def install_kernel(machine):
    host = hosts.create_host(machine)
    at.run(kernel_install_control, host=host)
job.parallel_simple(install_kernel, machines)
<BLANKLINE>
job.run_test('testname')
<BLANKLINE>
>>> cf_info['is_server']
True
