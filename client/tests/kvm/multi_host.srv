AUTHOR = "Jiri Zupka <jzupka@redhat.com>"
TIME = "SHORT"
NAME = ""
TEST_CATEGORY = "Functional"
TEST_CLASS = "Virtualization"
TEST_TYPE = "Server"

DOC = """
KVM tests (multi-host) server control

Runs tests across multiple hosts. It uses the config file
'multi-host-tests.cfg' in order to yield the appropriate
dicts for the multi host test.
"""

import sys, os, commands, glob, shutil, logging, random
from autotest_lib.server import utils
from autotest_lib.client.common_lib import cartesian_config, error

# Specify the directory of autotest before you start this test
AUTOTEST_DIR = job.clientdir

KVM_DIR = os.path.join(AUTOTEST_DIR, 'tests', 'kvm')

try:
    import autotest.common
except ImportError:
    import common

def generate_mac_address():
    r = random.SystemRandom()
    mac = "9a:%02x:%02x:%02x:%02x:%02x" % (r.randint(0x00, 0xff),
                                           r.randint(0x00, 0xff),
                                           r.randint(0x00, 0xff),
                                           r.randint(0x00, 0xff),
                                           r.randint(0x00, 0xff))
    return mac


def run(pair):
    logging.info("KVM test running on source host [%s] and destination "
                 "host [%s]\n", pair[0], pair[1])

    source = hosts.create_host(pair[0])
    dest = hosts.create_host(pair[1])
    source_at = autotest_remote.Autotest(source)
    dest_at = autotest_remote.Autotest(dest)

    cfg_file = os.path.join(KVM_DIR, "multi-host-tests.cfg")

    if not os.path.exists(cfg_file):
        raise error.JobError("Config file %s was not found", cfg_file)

    # Get test set (dictionary list) from the configuration file
    parser = cartesian_config.Parser()
    parser.parse_file(cfg_file)
    test_dicts = parser.get_dicts()

    source_control_file = dest_control_file = """
testname = "kvm"
bindir = os.path.join(job.testdir, testname)
job.install_pkg(testname, 'test', bindir)

kvm_test_dir = os.path.join(os.environ['AUTODIR'],'tests', 'kvm')
sys.path.append(kvm_test_dir)
"""
    import sys

    for params in test_dicts:
        params['srchost'] = source.ip
        params['dsthost'] = dest.ip

        for nic in params.get('nics',"").split():
            params['nic_mac_%s' % nic] = generate_mac_address()

        source_params = params.copy()
        source_params['role'] = "source"

        dest_params = params.copy()
        dest_params['role'] = "destination"
        dest_params['migration_mode'] = "tcp"

        # Report the parameters we've received
        print "Test parameters:"
        keys = params.keys()
        keys.sort()
        for key in keys:
            logging.debug("    %s = %s", key, params[key])

        source_control_file += ("job.run_test('kvm', tag='%s', params=%s)" %
                                (source_params['shortname'], source_params))
        dest_control_file += ("job.run_test('kvm', tag='%s', params=%s)" %
                              (dest_params['shortname'], dest_params))

        logging.info('Source control file:\n%s', source_control_file)
        logging.info('Destination control file:\n%s', dest_control_file)
        dest_command = subcommand(dest_at.run,
                                  [dest_control_file, dest.hostname])

        source_command = subcommand(source_at.run,
                                    [source_control_file, source.hostname])

        parallel([dest_command, source_command])

# Grab the pairs (and failures)
(pairs, failures) = utils.form_ntuples_from_machines(machines, 2)

# Log the failures
for failure in failures:
    job.record("FAIL", failure[0], "kvm", failure[1])

# Now run through each pair and run
job.parallel_simple(run, pairs, log=False)
