diff --git a/runin/src/memtst.src/maxalloc.c b/runin/src/memtst.src/maxalloc.c
index 9189193..f784055 100644
--- a/runin/src/memtst.src/maxalloc.c
+++ b/runin/src/memtst.src/maxalloc.c
@@ -8,9 +8,6 @@
 #include <malloc.h>
 #include "memory.h"
 
-/* this is horribly architecture specific */
-#include <asm/page.h>
-
 void maxalloc(int ceiling, int attempts) {
 	unsigned nint;
 	int *buf;
diff --git a/runin/src/memtst.src/memtst.c b/runin/src/memtst.src/memtst.c
index cb79bea..4bce4a2 100644
--- a/runin/src/memtst.src/memtst.c
+++ b/runin/src/memtst.src/memtst.c
@@ -8,8 +8,6 @@
 #include "memtst.h"
 #include "memory.h"
 
-#include <asm/page.h>
-
 /* The verbose global from memtst_main.c */
 extern int verbose;
 
@@ -324,6 +322,10 @@ void kmemscan (int *nbuf, int block_size, int offset) {
 	int kmem_file;
 	int d;
 
+	/* Newer linux distributions don't have asm/page.h therefore we are going
+	.  to get the page size using the value of _SC_PAGESIZE instead */
+	u_long page_size = sysconf(_SC_PAGESIZE);
+
 	/* window manipulation, iterator, read retval, etc */
 	int low, high, foo;
       	int rd;
@@ -346,7 +348,7 @@ void kmemscan (int *nbuf, int block_size, int offset) {
 
 	/* Now compute the offset (in chars) of the error from the page
 	   boundary. */
-	fail_page_offset = ((int) (&nbuf[offset])) % PAGE_SIZE;
+	fail_page_offset = ((int) (&nbuf[offset])) % page_size;
 
 	kmem_file = open("/proc/kcore",0);
 	if (kmem_file < 0) {
@@ -363,7 +365,7 @@ void kmemscan (int *nbuf, int block_size, int offset) {
 	 * window.
 	 */
 	fail_page_offset -= ((offset - low) * sizeof(int));
-	if (fail_page_offset < 0) fail_page_offset+=PAGE_SIZE;
+	if (fail_page_offset < 0) fail_page_offset+=page_size;
 
 	printf("%d %x fail_page_offset\n",fail_page_offset,fail_page_offset);
 
@@ -373,8 +375,8 @@ void kmemscan (int *nbuf, int block_size, int offset) {
 	/* Start by seeking to the start of the area on the page where
 	 * we'st be lookin'
 	 */
-	lseek(kmem_file,pages*PAGE_SIZE+fail_page_offset,SEEK_SET);
-	phys_addr=pages*PAGE_SIZE+fail_page_offset;
+	lseek(kmem_file,pages*page_size+fail_page_offset,SEEK_SET);
+	phys_addr=pages*page_size+fail_page_offset;
 
 	/* We now use lseeks to (hugely) improve the performance of this
 	   thing.  Large memory systems were extremely painful before. 
@@ -387,8 +389,8 @@ void kmemscan (int *nbuf, int block_size, int offset) {
 			foo = low;	
 			/* Every time we miss, skip to the next page. */
 			++pages;
-			lseek(kmem_file,pages*PAGE_SIZE+fail_page_offset,SEEK_SET);
-			phys_addr=pages*PAGE_SIZE+fail_page_offset;
+			lseek(kmem_file,pages*page_size+fail_page_offset,SEEK_SET);
+			phys_addr=pages*page_size+fail_page_offset;
 			continue;
 		}
 		/* If foo made it to high, we've found it. */
@@ -401,7 +403,7 @@ void kmemscan (int *nbuf, int block_size, int offset) {
 			fprintf(stderr, "Possible location of memory failure: %p (%dM) on page %d\n",
 				(void *) failure,
 				(int) (failure/1024/1024),
-				(int) (failure/PAGE_SIZE));
+				(int) (failure/page_size));
 			close(kmem_file);
 			return;
 		} 
